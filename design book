我来帮您设计一个博客系统的设计文档。

# IBlog 系统设计文档

## 一、系统架构

### 1. 技术栈
前端：
- React 19
- React Router（路由管理）
- Redux（状态管理）
- Ant Design（UI组件库）
- Axios（HTTP请求）

后端：
- Spring Boot 3.x
- Spring Security（认证和授权）
- MySQL 8.x
- MyBatis Plus（ORM框架）
- Redis（缓存）
- JWT（用户认证）

## 二、数据库设计

### 1. 用户表（user）
```sql
CREATE TABLE user (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    nickname VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    avatar VARCHAR(255),
    role VARCHAR(20) DEFAULT 'USER',
    status TINYINT DEFAULT 1,
    created_time DATETIME,
    updated_time DATETIME,
    last_login DATETIME
);
```

### 2. 文章表（article）
```sql
CREATE TABLE article (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    user_id BIGINT,
    category_id BIGINT,
    views INT DEFAULT 0,
    likes INT DEFAULT 0,
    status TINYINT DEFAULT 1,
    is_top TINYINT DEFAULT 0,
    created_time DATETIME,
    updated_time DATETIME,
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (category_id) REFERENCES category(id)
);
```

### 3. 分类表（category）
```sql
CREATE TABLE category (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(200),
    created_time DATETIME,
    updated_time DATETIME
);
```

### 4. 评论表（comment）
```sql
CREATE TABLE comment (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    content TEXT NOT NULL,
    user_id BIGINT,
    article_id BIGINT,
    parent_id BIGINT,
    created_time DATETIME,
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (article_id) REFERENCES article(id),
    FOREIGN KEY (parent_id) REFERENCES comment(id)
);
```

## 三、API 接口设计

### 1. 用户模块
```
POST /api/auth/register     # 用户注册
POST /api/auth/login        # 用户登录
GET /api/auth/info          # 获取用户信息
PUT /api/auth/info          # 更新用户信息
POST /api/auth/logout       # 用户登出
```

### 2. 文章模块
```
GET /api/articles           # 获取文章列表
GET /api/articles/{id}      # 获取文章详情
POST /api/articles          # 创建文章
PUT /api/articles/{id}      # 更新文章
DELETE /api/articles/{id}   # 删除文章
GET /api/articles/hot       # 获取热门文章
```

### 3. 分类模块
```
GET /api/categories         # 获取分类列表
POST /api/categories        # 创建分类
PUT /api/categories/{id}    # 更新分类
DELETE /api/categories/{id} # 删除分类
```

### 4. 评论模块
```
GET /api/comments/article/{articleId}  # 获取文章评论
POST /api/comments                     # 发表评论
DELETE /api/comments/{id}              # 删除评论
```

## 四、前端页面结构

```
src/
├── components/            # 通用组件
│   ├── Header/           # 页面头部
│   ├── Footer/           # 页面底部
│   ├── ArticleCard/      # 文章卡片
│   └── CommentList/      # 评论列表
├── pages/                # 页面组件
│   ├── Home/            # 首页
│   ├── Login/           # 登录页
│   ├── Register/        # 注册页
│   ├── ArticleDetail/   # 文章详情页
│   ├── ArticleEdit/     # 文章编辑页
│   └── UserCenter/      # 用户中心
├── redux/               # 状态管理
│   ├── actions/
│   ├── reducers/
│   └── store.js
└── utils/              # 工具函数
    ├── request.js     # axios 配置
    └── auth.js        # 认证相关
```

## 五、后端项目结构

```
src/main/java/com/iblog/
├── config/           # 配置类
├── controller/       # 控制器
├── service/         # 服务层
│   └── impl/       # 服务实现
├── mapper/          # MyBatis接口
├── entity/          # 实体类
├── dto/             # 数据传输对象
├── vo/              # 视图对象
├── common/          # 公共组件
│   ├── exception/   # 异常处理
│   ├── response/    # 响应封装
│   └── utils/       # 工具类
└── security/        # 安全相关
```

## 六、核心功能实现要点

### 1. 用户认证
- 使用 JWT 实现无状态认证
- Token 刷新机制
- 密码加密存储

### 2. 文章管理
- Markdown 编辑器支持
- 文章缓存机制
- 文章访问统计

### 3. 评论系统
- 树形评论结构
- 评论分页加载
- 评论通知功能

### 4. 性能优化
- Redis 缓存热门文章
- 文章列表分页
- 图片懒加载

## 七、安全考虑

1. XSS 防护
2. CSRF 防护
3. SQL 注入防护
4. 敏感数据加密
5. 接口权限控制

## 八、部署建议

1. 使用 Docker 容器化部署
2. Nginx 反向代理
3. HTTPS 证书配置
4. 数据库定期备份
5. 日志监控系统

这个设计文档提供了一个基础的框架，您可以根据具体需求进行调整和扩展。建议在开发前与团队成员讨论这个设计，确保大家对系统架构有共同的理解。

需要补充或修改的部分，我很乐意继续协助您完善这个设计方案。
